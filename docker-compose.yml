version: '3'

x-spark-common: &spark-common
  image: bitnami/spark:latest
  volumes:
    - ./jobs:/opt/bitnami/spark/jobs
    - ./data:/opt/bitnami/spark/data
  networks:
    - airflow-spark

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  env_file:
    - airflow.env
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./airflow/modules:/opt/airflow/modules
    - ./airflow/utils:/opt/airflow/utils
    - ./airflow/plugins:/opt/airflow/plugins
    - ./airflow/config:/opt/airflow/config
    - ./data:/opt/airflow/data
  depends_on:
    - postgres
  networks:
    - airflow-spark

services:
  spark-master:
    <<: *spark-common
    command: bin/spark-class org.apache.spark.deploy.master.Master
    container_name: spark-master
    ports:
      - "9090:8080"
      - "7077:7077"

  spark-worker:
    <<: *spark-common
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    container_name: spark-worker
    environment:
      SPARK_MODE: worker
      SPARK_WORKER_CORES: 2
      SPARK_WORKER_MEMORY: 1g
      SPARK_MASTER_URL: spark://spark-master:7077

  postgres:
    image: postgres:14.0
    container_name: postgres
    environment:
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
      - POSTGRES_DB=airflow
    ports:
      - 5432:5432
    volumes:
      - postgresdb-data:/var/lib/postgresql/data
    networks:
      - airflow-spark

  webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    depends_on:
      - scheduler

  scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    command: bash -c "airflow db migrate && airflow users create \
             --username airflow \
             --firstname airflow \
             --lastname airflow \
             --role Admin \
             --email airflow@gmail.com \
             --password airflow && airflow scheduler"

  minio:
    image: minio/minio:latest
    container_name: minio
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: myuser
      MINIO_ROOT_PASSWORD: mypassword
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 1s
      timeout: 10s
      retries: 5
    volumes:
      - minio-data:/data
    command: >
      server /data --console-address ":9001"
    networks:
      - airflow-spark
    
  mlflow-tracking-server:
    build: 
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow
    depends_on:
      - minio
    expose:
      - "5000"
    ports:
      - "5000:5000"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://host.docker.internal:9000
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY: 
    command: >
      mlflow server
      --host 0.0.0.0
      --port 5000
      --backend-store-uri sqlite:///mydb.sqlite
      --artifacts-destination s3://artifact-store
    networks:
      - airflow-spark

  zookeeper:
    image: zookeeper
    container_name: zookeeeper
    ports:
      - "2181:2181"
    networks:
      - airflow-spark

  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"  
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://host.docker.internal:9092"  
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 
    networks:
      - airflow-spark 

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    networks:
      - airflow-spark

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express
    restart: always
    ports:
      - "8081:8081"
    depends_on:
      - mongodb
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: root
      ME_CONFIG_MONGODB_URL: mongodb://root:root@host.docker.internal:27017/ 
    networks:
      - airflow-spark

networks:
  airflow-spark:

volumes:
  minio-data:
  postgresdb-data:
  mongodb_data:

